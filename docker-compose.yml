# Docker Compose configuration for Film! project

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: film_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/test/setup_database_utf8.sql:/docker-entrypoint-initdb.d/01-setup.sql
    ports:
      - "5432:5432"
    networks:
      - film_network
    restart: unless-stopped

  # pgAdmin для управления базой данных
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: film_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - film_network
    restart: unless-stopped
    depends_on:
      - postgres

  # Бэкенд приложения
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}/backend:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: film_backend
    environment:
      - DATABASE_DRIVER=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - PORT=3000
      - NODE_ENV=production
      - USE_IN_MEMORY_REPOSITORY=false
      - LOGGER_TYPE=${LOGGER_TYPE}
    volumes:
      - ./backend/public:/app/public
    ports:
      - "3000:3000"
    networks:
      - film_network
    restart: unless-stopped
    depends_on:
      - postgres

  # Фронтенд приложения (только для сборки статических файлов)
  frontend:
    image: ${DOCKER_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY}/frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: film_frontend
    volumes:
      - frontend_static:/app/dist
    networks:
      - film_network
    restart: unless-stopped
    depends_on:
      - backend
    command: ["sh", "-c", "cp -r /usr/share/nginx/html/* /app/dist/ && tail -f /dev/null"]

  # Nginx сервер
  server:
    image: ghcr.io/${GITHUB_REPOSITORY}/server:latest
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: film_server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - frontend_static:/usr/share/nginx/html:ro
      - ./server/logs:/var/log/nginx
      - ./server/cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - film_network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  frontend_static:
    driver: local

networks:
  film_network:
    driver: bridge

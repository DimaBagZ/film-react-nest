#!/bin/bash

# Docker Manager –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Film!
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "üê≥ Docker Manager –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Film!"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
    echo "  build     - –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
    echo "  clean     - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à TypeORM –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  test      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã API"
    echo "  reset     - –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å (—É–¥–∞–ª–∏—Ç—å volumes –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å)"
    echo "  clear-seats - –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞ –≤ –ë–î"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start"
    echo "  $0 clean"
    echo "  $0 logs backend"
    echo "  $0 clear-seats --all"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
start_project() {
    log_info "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
    cd "$(dirname "$0")/.."
    docker-compose up -d
    log_success "–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
stop_project() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    cd "$(dirname "$0")/.."
    docker-compose down
    log_success "–ü—Ä–æ–µ–∫—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
restart_project() {
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
    cd "$(dirname "$0")/.."
    docker-compose restart
    log_success "–ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    log_info "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
    cd "$(dirname "$0")/.."
    docker-compose up --build -d
    log_success "–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ TypeORM
clean_typeorm_cache() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ TypeORM –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞..."
    cd "$(dirname "$0")/.."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose down
    
    # –£–¥–∞–ª–µ–Ω–∏–µ volumes –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ volumes PostgreSQL..."
    docker volume rm film-react-nest_postgres_data 2>/dev/null || true
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ TypeORM –≤ backend
    log_info "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ TypeORM..."
    cd backend
    rm -rf dist/
    rm -rf node_modules/
    rm -f package-lock.json
    
    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log_info "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    log_info "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    npm run build
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd ..
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_info "–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose up -d
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Å –Ω–æ–≤—ã–º–∏ —Å—Ö–µ–º–∞–º–∏."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    cd "$(dirname "$0")/.."
    if [ -n "$1" ]; then
        log_info "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: $1"
        docker-compose logs -f "$1"
    else
        log_info "–õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        docker-compose logs -f
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    cd "$(dirname "$0")/.."
    log_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
test_api() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 5
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
    log_info "–¢–µ—Å—Ç: GET /api/afisha/films"
    if curl -s http://localhost:3000/api/afisha/films > /dev/null; then
        log_success "API —Ñ–∏–ª—å–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "API —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    log_info "–¢–µ—Å—Ç: GET /api/afisha/films/{id}/schedule"
    if curl -s "http://localhost:3000/api/afisha/films/92b8a2a7-ab6b-4fa9-915b-d27945865e39/schedule" > /dev/null; then
        log_success "API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    # –¢–µ—Å—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    log_info "–¢–µ—Å—Ç: Frontend (–ø–æ—Ä—Ç 80)"
    if curl -s -I http://localhost:80 | grep -q "200 OK"; then
        log_success "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
reset_project() {
    log_warning "–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö)!"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cd "$(dirname "$0")/.."
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose down
        
        # –£–¥–∞–ª–µ–Ω–∏–µ volumes
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ volumes..."
        docker volume rm film-react-nest_postgres_data 2>/dev/null || true
        docker volume rm film-react-nest_pgadmin_data 2>/dev/null || true
        docker volume rm film-react-nest_frontend_static 2>/dev/null || true
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
        docker rmi ghcr.io/dimabagz/film-react-nest/backend:latest 2>/dev/null || true
        docker rmi ghcr.io/dimabagz/film-react-nest/frontend:latest 2>/dev/null || true
        docker rmi ghcr.io/dimabagz/film-react-nest/server:latest 2>/dev/null || true
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤ backend
        cd backend
        rm -rf dist/ node_modules/ package-lock.json
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º package-lock.json
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ package-lock.json..."
        npm install
        
        cd ..
        
        # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞
        log_info "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
        docker-compose up --build -d
        
        log_success "–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!"
    else
        log_info "–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç
clear_taken_seats() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    cd "$(dirname "$0")/.."
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏
    ./tools/clear-taken-seats.sh "$@"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    start)
        start_project
        ;;
    stop)
        stop_project
        ;;
    restart)
        restart_project
        ;;
    build)
        build_project
        ;;
    clean)
        clean_typeorm_cache
        ;;
    logs)
        show_logs "$2"
        ;;
    status)
        show_status
        ;;
    test)
        test_api
        ;;
    reset)
        reset_project
        ;;
    clear-seats)
        shift
        clear_taken_seats "$@"
        ;;
    help|*)
        show_help
        ;;
esac 